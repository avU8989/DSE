/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package swa.meet.api;

import swa.meet.Attendee;
import swa.meet.Meeting;
import swa.meet.Timeslot;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-03T13:56:05.584535900+02:00[Europe/Vienna]")
@Validated
@Tag(name = "meetings", description = "the meetings API")
public interface MeetingsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /meetings : Retrieve all meeting schedules
     *
     * @return Fetching all meetings (status code 200)
     */
    @Operation(
        operationId = "meetingsGet",
        summary = "Retrieve all meeting schedules",
        responses = {
            @ApiResponse(responseCode = "200", description = "Fetching all meetings", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Meeting.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/meetings",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Meeting>> meetingsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"scheduleName\" : \"scheduleName\", \"creator\" : \"creator\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"validUntil\" : \"2000-01-23T04:56:07.000+00:00\", \"responses\" : [ { \"person\" : { \"name\" : \"name\", \"email\" : \"email\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"person\" : { \"name\" : \"name\", \"email\" : \"email\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timeslots\" : [ { \"start\" : \"2000-01-23T04:56:07.000+00:00\", \"end\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"start\" : \"2000-01-23T04:56:07.000+00:00\", \"end\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ] }, { \"scheduleName\" : \"scheduleName\", \"creator\" : \"creator\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"validUntil\" : \"2000-01-23T04:56:07.000+00:00\", \"responses\" : [ { \"person\" : { \"name\" : \"name\", \"email\" : \"email\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"person\" : { \"name\" : \"name\", \"email\" : \"email\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timeslots\" : [ { \"start\" : \"2000-01-23T04:56:07.000+00:00\", \"end\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"start\" : \"2000-01-23T04:56:07.000+00:00\", \"end\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /meetings/{meetingId}/attendance : Submit a response for a meeting
     *
     * @param meetingId  (required)
     * @param attendee  (required)
     * @return Attendance submitted successfully (status code 201)
     *         or Meeting not found (status code 404)
     */
    @Operation(
        operationId = "meetingsMeetingIdAttendancePost",
        summary = "Submit a response for a meeting",
        responses = {
            @ApiResponse(responseCode = "201", description = "Attendance submitted successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attendee.class))
            }),
            @ApiResponse(responseCode = "404", description = "Meeting not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/meetings/{meetingId}/attendance",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Attendee> meetingsMeetingIdAttendancePost(
        @Parameter(name = "meetingId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("meetingId") String meetingId,
        @Parameter(name = "Attendee", description = "", required = true) @Valid @RequestBody Attendee attendee
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"person\" : { \"name\" : \"John Doe\", \"email\" : \"john.doe@example.com\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /meetings/{meetingId} : Delete a specific meeting
     *
     * @param meetingId  (required)
     * @return Meeting deleted successfully (status code 204)
     *         or Meeting not found (status code 404)
     */
    @Operation(
        operationId = "meetingsMeetingIdDelete",
        summary = "Delete a specific meeting",
        responses = {
            @ApiResponse(responseCode = "204", description = "Meeting deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Meeting not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/meetings/{meetingId}"
    )
    
    default ResponseEntity<Void> meetingsMeetingIdDelete(
        @Parameter(name = "meetingId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("meetingId") String meetingId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /meetings/{meetingId} : Get a specific meeting
     *
     * @param meetingId  (required)
     * @return Details of a specific meeting (status code 200)
     *         or Meeting not found (status code 404)
     */
    @Operation(
        operationId = "meetingsMeetingIdGet",
        summary = "Get a specific meeting",
        responses = {
            @ApiResponse(responseCode = "200", description = "Details of a specific meeting", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Meeting.class))
            }),
            @ApiResponse(responseCode = "404", description = "Meeting not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/meetings/{meetingId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Meeting> meetingsMeetingIdGet(
        @Parameter(name = "meetingId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("meetingId") String meetingId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"scheduleName\" : \"scheduleName\", \"creator\" : \"creator\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"validUntil\" : \"2000-01-23T04:56:07.000+00:00\", \"responses\" : [ { \"person\" : { \"name\" : \"name\", \"email\" : \"email\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"person\" : { \"name\" : \"name\", \"email\" : \"email\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timeslots\" : [ { \"start\" : \"2000-01-23T04:56:07.000+00:00\", \"end\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"start\" : \"2000-01-23T04:56:07.000+00:00\", \"end\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /meetings/{meetingId} : Update a specific meeting
     *
     * @param meetingId  (required)
     * @param meeting  (required)
     * @return Meeting updated successfully (status code 200)
     *         or Meeting not found (status code 404)
     */
    @Operation(
        operationId = "meetingsMeetingIdPut",
        summary = "Update a specific meeting",
        responses = {
            @ApiResponse(responseCode = "200", description = "Meeting updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Meeting.class))
            }),
            @ApiResponse(responseCode = "404", description = "Meeting not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/meetings/{meetingId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Meeting> meetingsMeetingIdPut(
        @Parameter(name = "meetingId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("meetingId") String meetingId,
        @Parameter(name = "Meeting", description = "", required = true) @Valid @RequestBody Meeting meeting
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"scheduleName\" : \"scheduleName\", \"creator\" : \"creator\", \"created\" : \"2000-01-23T04:56:07\", \"description\" : \"description\", \"validUntil\" : \"2000-01-23T04:56:07\", \"responses\" : [ { \"person\" : { \"name\" : \"John Doe\", \"email\" : \"john.doe@example.com\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"person\" : { \"name\" : \"Jane Doe\", \"email\" : \"jane.doe@example.com\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timeslots\" : [ { \"start\" : \"2000-01-23T04:56:07\", \"end\" : \"2000-01-23T04:56:07\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"start\" : \"2000-01-23T04:56:07\", \"end\" : \"2000-01-23T04:56:07\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /meetings/{meetingId}/responses : Get all attendances for a meeting
     *
     * @param meetingId  (required)
     * @return List of all attendances (status code 200)
     *         or Meeting not found (status code 404)
     */
    @Operation(
        operationId = "meetingsMeetingIdResponsesGet",
        summary = "Get all attendances for a meeting",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of all attendances", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Attendee.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Meeting not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/meetings/{meetingId}/responses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Attendee>> meetingsMeetingIdResponsesGet(
        @Parameter(name = "meetingId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("meetingId") String meetingId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"person\" : { \"name\" : \"name\", \"email\" : \"email\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"person\" : { \"name\" : \"name\", \"email\" : \"email\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /meetings/{meetingId}/slots : Add a new time slot to a specific meeting
     *
     * @param meetingId  (required)
     * @param timeslot  (required)
     * @return Time slot added successfully (status code 201)
     *         or Meeting not found (status code 404)
     */
    @Operation(
        operationId = "meetingsMeetingIdSlotsPost",
        summary = "Add a new time slot to a specific meeting",
        responses = {
            @ApiResponse(responseCode = "201", description = "Time slot added successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Timeslot.class))
            }),
            @ApiResponse(responseCode = "404", description = "Meeting not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/meetings/{meetingId}/slots",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Timeslot> meetingsMeetingIdSlotsPost(
        @Parameter(name = "meetingId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("meetingId") String meetingId,
        @Parameter(name = "Timeslot", description = "", required = true) @Valid @RequestBody Timeslot timeslot
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"start\" : \"2000-01-23T04:56:07.000+00:00\", \"end\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /meetings/{meetingId}/slots/{slotId} : Delete a specific time slot from a meeting
     *
     * @param meetingId  (required)
     * @param slotId  (required)
     * @return Time slot deleted successfully (status code 200)
     *         or Meeting or time slot not found (status code 404)
     */
    @Operation(
        operationId = "meetingsMeetingIdSlotsSlotIdDelete",
        summary = "Delete a specific time slot from a meeting",
        responses = {
            @ApiResponse(responseCode = "200", description = "Time slot deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Meeting or time slot not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/meetings/{meetingId}/slots/{slotId}"
    )
    
    default ResponseEntity<Void> meetingsMeetingIdSlotsSlotIdDelete(
        @Parameter(name = "meetingId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("meetingId") String meetingId,
        @Parameter(name = "slotId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("slotId") String slotId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /meetings : Create a new meeting
     *
     * @param meeting  (required)
     * @return Meeting created (status code 201)
     *         or Error during creating Meeting (status code 400)
     */
    @Operation(
        operationId = "meetingsPost",
        summary = "Create a new meeting",
        responses = {
            @ApiResponse(responseCode = "201", description = "Meeting created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Meeting.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error during creating Meeting")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/meetings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Meeting> meetingsPost(
        @Parameter(name = "Meeting", description = "", required = true) @Valid @RequestBody Meeting meeting
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"scheduleName\" : \"scheduleName\", \"creator\" : \"creator\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"validUntil\" : \"2000-01-23T04:56:07.000+00:00\", \"responses\" : [ { \"person\" : { \"name\" : \"name\", \"email\" : \"email\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"person\" : { \"name\" : \"name\", \"email\" : \"email\" }, \"availabilities\" : [ { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" }, { \"slotId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"availability\" : \"true\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timeslots\" : [ { \"start\" : \"2000-01-23T04:56:07.000+00:00\", \"end\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"start\" : \"2000-01-23T04:56:07.000+00:00\", \"end\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
