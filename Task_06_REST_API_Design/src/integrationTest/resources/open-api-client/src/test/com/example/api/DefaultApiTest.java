/*
 * Meeting Scheduler API
 * API for scheduling and managing meetings with multiple proposed time slots.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.api;

import com.example.api.DefaultApi;
import com.example.invoker.ApiClient;
import com.example.model.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.Api;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestClientException;

import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private static DefaultApi api;
    @BeforeAll
    public static void setup() {
        ApiClient apiClient = new ApiClient();
        apiClient.setBasePath("http://localhost:8080/api");
        api = new DefaultApi(apiClient);
    }

    @Test
    public void getMeetings_ShouldReturnNonEmptyList_WhenMeetingsExists() throws JsonProcessingException {
        HttpServerErrorException.NotImplemented exception = assertThrows(HttpServerErrorException.NotImplemented.class, () -> {
            api.meetingsGet();
        });
    }

    @Test
    public void postAttendance_ShouldThrowBadRequest_WhenAttendeeIsInvalid() {
        Attendee invalidAttendee = new Attendee();
        AttendeePerson person = new AttendeePerson();
        person.setName("Anh Vu");
        invalidAttendee.setPerson(person);
        AttendeeAvailabilities availabilities = new AttendeeAvailabilities();
        availabilities.setAvailability(AttendeeAvailabilities.AvailabilityEnum.YES);
        invalidAttendee.addAvailabilitiesItem(availabilities);

        HttpClientErrorException.BadRequest exception = assertThrows(HttpClientErrorException.BadRequest.class, () -> {
            api.meetingsMeetingIdAttendancePost("1", invalidAttendee);
        });

        assertNotNull(exception.getMessage());
    }

    @Test
    public void postAttendance_ShouldThrowException_WhenAttendeeIsNull(){
        String meetingId = "1";
        Attendee attendeeRequest = null;

        assertThrows(HttpClientErrorException.class, () -> api.meetingsMeetingIdAttendancePost(meetingId, attendeeRequest));
    }

    @Test
    public void postAttendance_ShouldThrowException_WhenMeetingIdIsNull(){
        String meetingId = null;
        Attendee attendeeRequest = new Attendee();
        AttendeePerson person = new AttendeePerson();
        person.setName("Anh Vu");
        attendeeRequest.setPerson(person);
        AttendeeAvailabilities availabilities = new AttendeeAvailabilities();
        availabilities.setAvailability(AttendeeAvailabilities.AvailabilityEnum.YES);
        attendeeRequest.addAvailabilitiesItem(availabilities);

        assertThrows(HttpClientErrorException.class, () -> api.meetingsMeetingIdAttendancePost(meetingId, attendeeRequest));
    }

    @Test
    public void postAttendance_ShouldFail_WhenAvailabilitiesNotGiven(){
        String meetingId = "1";
        Attendee attendeeRequest = new Attendee();
        AttendeePerson person = new AttendeePerson();
        person.setName("Anh Vu");
        attendeeRequest.setPerson(person);
        AttendeeAvailabilities availabilities = new AttendeeAvailabilities();
        availabilities.setAvailability(AttendeeAvailabilities.AvailabilityEnum.YES);
        attendeeRequest.addAvailabilitiesItem(availabilities);

        HttpClientErrorException.BadRequest exception = assertThrows(HttpClientErrorException.BadRequest.class, () -> {
            api.meetingsMeetingIdAttendancePost(meetingId, attendeeRequest);
        });
    }
    
    /**
     * Delete a specific meeting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMeeting_ShouldThrowError_WhenMeetingIdIsInvalid() {
        String meetingId =null;

        assertThrows(HttpClientErrorException.class, () -> api.meetingsMeetingIdGet(meetingId));

    }

    @Test
    public void deleteMeeting_ShouldRemoveMeeting_WhenMeetingIdIsValid() {
        String meetingId = "1";

        assertThrows(HttpServerErrorException.NotImplemented.class, () -> api.meetingsMeetingIdGet(meetingId));

    }
    
    /**
     * Get a specific meeting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void meetingsMeetingIdGetTest() {
        String meetingId = "1";

        assertThrows(HttpServerErrorException.NotImplemented.class, () -> api.meetingsMeetingIdGet(meetingId));

    }

    @Test
    public void getMeeting_ShouldThrowException_WhenMeetingIDIsNull() {
        String meetingId = null;

        assertThrows(RestClientException.class, () -> api.meetingsMeetingIdGet(meetingId));
    }

    /**
     * Update a specific meeting
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putMeeting_ShouldThrowException_WhenMeetingIDNotExists(){
        String meetingId = UUID.randomUUID().toString();
        Meeting meeting = new Meeting();
        meeting.setScheduleName("Updated Meeting");
        assertThrows(RestClientException.class, () -> api.meetingsMeetingIdGet(meetingId));

        assertThrows(HttpClientErrorException.BadRequest.class, () -> api.meetingsMeetingIdPut(meetingId, meeting));


    }

    @Test
    public void putMeeting_ShouldThrowException_WhenMeetingIDIsNull(){
        String meetingId = null;
        Meeting meeting = new Meeting();
        meeting.setScheduleName("Updated Meeting");

        assertThrows(RestClientException.class, () -> api.meetingsMeetingIdPut(meetingId, meeting));

    }

    @Test
    public void putMeeting_ShouldThrowException_WhenMeetingIsNull(){
        String meetingId = "1";
        Meeting meeting = null;

        assertThrows(RestClientException.class, () -> api.meetingsMeetingIdPut(meetingId, meeting));
    }

    
    /**
     * Get all attendances for a meeting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttendees_ShouldFetchAttendees_WhenResponseIsNotEmpty() {
        String meetingId = "1";

        HttpServerErrorException.NotImplemented exception = assertThrows(HttpServerErrorException.NotImplemented.class, () -> {
            List<Attendee> response = api.meetingsMeetingIdResponsesGet(meetingId);

            assertNotNull(response, "Response should not be null");
            assertFalse(response.isEmpty(), "Response should not be empty");
        });

        assertNotNull(exception.getMessage());
    }

    @Test
    public void getAttendees_ShouldThrowException_WhenMeetingIDIsNull(){
        String meetingId = null;
        assertThrows(RestClientException.class, () -> api.meetingsMeetingIdResponsesGet(meetingId));
    }

    @Test
    public void deleteSlot_ShouldThrowRestClientException_WhenSlotIdIsNull() {
        String meetingId = "1";
        String slotId = null;
        assertThrows(RestClientException.class, () ->api.meetingsMeetingIdSlotsSlotIdDelete(meetingId, slotId));

        // TODO: test validations
    }

    
}
