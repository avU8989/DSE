/*
 * Meeting Scheduler API
 * API for scheduling and managing meetings with multiple proposed time slots.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AttendeeAvailabilities
 */
@JsonPropertyOrder({
  AttendeeAvailabilities.JSON_PROPERTY_SLOT_ID,
  AttendeeAvailabilities.JSON_PROPERTY_AVAILABILITY
})
@JsonTypeName("Attendee_availabilities")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-04T01:04:18.517807200+02:00[Europe/Vienna]")
public class AttendeeAvailabilities {
  public static final String JSON_PROPERTY_SLOT_ID = "slotId";
  private UUID slotId;

  /**
   * Gets or Sets availability
   */
  public enum AvailabilityEnum {
    YES("yes"),
    
    NO("no"),
    
    MAYBE("maybe");

    private String value;

    AvailabilityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AvailabilityEnum fromValue(String value) {
      for (AvailabilityEnum b : AvailabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AVAILABILITY = "availability";
  private AvailabilityEnum availability;

  public AttendeeAvailabilities() { 
  }

  public AttendeeAvailabilities slotId(UUID slotId) {
    
    this.slotId = slotId;
    return this;
  }

   /**
   * Get slotId
   * @return slotId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SLOT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getSlotId() {
    return slotId;
  }


  @JsonProperty(JSON_PROPERTY_SLOT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlotId(UUID slotId) {
    this.slotId = slotId;
  }


  public AttendeeAvailabilities availability(AvailabilityEnum availability) {
    
    this.availability = availability;
    return this;
  }

   /**
   * Get availability
   * @return availability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AVAILABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AvailabilityEnum getAvailability() {
    return availability;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailability(AvailabilityEnum availability) {
    this.availability = availability;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttendeeAvailabilities attendeeAvailabilities = (AttendeeAvailabilities) o;
    return Objects.equals(this.slotId, attendeeAvailabilities.slotId) &&
        Objects.equals(this.availability, attendeeAvailabilities.availability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(slotId, availability);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttendeeAvailabilities {\n");
    sb.append("    slotId: ").append(toIndentedString(slotId)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

